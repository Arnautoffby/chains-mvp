"""
/**
 * @file: registration.py
 * @description: –•—ç–Ω–¥–ª–µ—Ä—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∑–∞–ø—Ä–æ—Å USDT-–∫–æ—à–µ–ª—å–∫–∞ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–ª–∞—Ç—ã
 * @dependencies: aiogram, db.models, bot.services.payments
 * @created: 2025-06-28
 */
"""

from __future__ import annotations

import re
from typing import Optional

from aiogram import Router, Bot
from aiogram.filters import CommandStart, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from sqlalchemy import select
from sqlalchemy.ext.asyncio import AsyncSession

from db.models import User, UserStatus
from bot.config import get_settings
from bot.services.payments import create_pending_payments, verify_payments

router = Router()


class RegistrationStates(StatesGroup):
    waiting_wallet = State()
    waiting_payment = State()


WALLET_RE = re.compile(r"^[a-zA-Z0-9]{20,70}$")


def _build_invite_link(bot_username: str, user_id: int) -> str:
    return f"https://t.me/{bot_username}?start={user_id}"


@router.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext, session: AsyncSession, bot: Bot) -> None:
    """–°—Ç–∞—Ä—Ç: —Å–æ–∑–¥–∞—ë–º –∏–ª–∏ –Ω–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."""

    telegram_id = str(message.from_user.id)

    result = await session.execute(select(User).where(User.telegram_id == telegram_id))
    user: Optional[User] = result.scalar_one_or_none()

    if user is None:
        user = User(telegram_id=telegram_id, usdt_wallet="", status=UserStatus.pending)
        session.add(user)
        await session.commit()

    if not user.usdt_wallet:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∞–¥—Ä–µ—Å –≤–∞—à–µ–≥–æ <b>USDT (TRC-20)</b> –∫–æ—à–µ–ª—å–∫–∞.")
        await state.set_state(RegistrationStates.waiting_wallet)
        return

    if user.status == UserStatus.pending:
        await send_payment_instructions(message, user, state)
        return

    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–∫—Ç–∏–≤–µ–Ω ‚Äì –æ—Ç–¥–∞—ë–º –∏–Ω–≤–∞–π—Ç
    invite_link = _build_invite_link((await bot.get_me()).username, user.id)
    await message.answer(
        "–í—ã —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã!\n"
        f"–í–∞—à–∞ –∏–Ω–≤–∞–π—Ç-—Å—Å—ã–ª–∫–∞: {invite_link}"
    )


@router.message(StateFilter(RegistrationStates.waiting_wallet))
async def wallet_received(message: Message, state: FSMContext, session: AsyncSession, bot: Bot) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∫–æ—à–µ–ª—ë–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""

    wallet = message.text.strip()
    if not WALLET_RE.fullmatch(wallet):
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ—à–µ–ª—å–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    telegram_id = str(message.from_user.id)
    result = await session.execute(select(User).where(User.telegram_id == telegram_id))
    user: User = result.scalar_one()

    user.usdt_wallet = wallet
    user.status = UserStatus.pending
    await session.commit()

    # –°–æ–∑–¥–∞—ë–º –∑–∞–ø–∏—Å–∏ –æ–∂–∏–¥–∞–µ–º—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π (chain_id=0 ‚Äì MVP)
    await create_pending_payments(session, chain_id=0, from_wallet=wallet)

    await send_payment_instructions(message, user, state)


async def send_payment_instructions(message: Message, user: User, state: FSMContext) -> None:
    """–®–ª—ë–º —Å–ø–∏—Å–æ–∫ –∞–¥—Ä–µ—Å–æ–≤ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –∏ –∫–Ω–æ–ø–∫—É `–ì–æ—Ç–æ–≤–æ‚úÖ`."""

    settings = get_settings()

    addresses_list = "\n".join(
        [f"{idx + 1}. <code>{addr}</code>" for idx, addr in enumerate(settings.game.payment_addresses)]
    )

    ready_kb = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="–ì–æ—Ç–æ–≤–æ‚úÖ")]], resize_keyboard=True, one_time_keyboard=True
    )

    await message.answer(
        "–ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ <b>–ø–æ $1 USDT</b> –Ω–∞ –∫–∞–∂–¥—ã–π –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö –∞–¥—Ä–µ—Å–æ–≤ (TRC-20):\n\n"
        f"{addresses_list}\n\n"
        "–ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤—Å–µ—Ö 10 –ø–ª–∞—Ç–µ–∂–µ–π –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É <b>–ì–æ—Ç–æ–≤–æ‚úÖ</b>.",
        reply_markup=ready_kb,
    )

    await state.set_state(RegistrationStates.waiting_payment)


@router.message(StateFilter(RegistrationStates.waiting_payment))
async def payment_done(message: Message, state: FSMContext, session: AsyncSession, bot: Bot) -> None:
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–ª–∞—Ç–µ–∂–∏ –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è '–ì–æ—Ç–æ–≤–æ‚úÖ'."""

    if message.text.strip().lower() not in {"–≥–æ—Ç–æ–≤–æ‚úÖ", "–≥–æ—Ç–æ–≤–æ", "gotovo"}:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É <b>–ì–æ—Ç–æ–≤–æ‚úÖ</b> –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤.")
        return

    telegram_id = str(message.from_user.id)
    result = await session.execute(select(User).where(User.telegram_id == telegram_id))
    user: User = result.scalar_one()

    verified = await verify_payments(session, user_wallet=user.usdt_wallet, chain_id=0)

    if not verified:
        await message.answer("–û–ø–ª–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    user.status = UserStatus.active
    await session.commit()

    invite_link = _build_invite_link((await bot.get_me()).username, user.id)

    await message.answer(
        "–û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! üéâ\n\n"
        f"–í–∞—à–∞ –∏–Ω–≤–∞–π—Ç-—Å—Å—ã–ª–∫–∞: {invite_link}\n\n"
        "–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ X –¥—Ä—É–∑–µ–π, —á—Ç–æ–±—ã –ø—Ä–æ–¥–≤–∏–≥–∞—Ç—å—Å—è –¥–∞–ª—å—à–µ.",
        reply_markup=None,
    )

    await state.clear()